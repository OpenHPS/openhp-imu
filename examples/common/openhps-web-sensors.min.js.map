{"version":3,"file":"web/openhps-web-sensors.min.js","mappings":"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","sources":["webpack://OpenHPS.sensors/webpack/universalModuleDefinition","webpack://OpenHPS.sensors/./dist/cjs/index.js","webpack://OpenHPS.sensors/./dist/cjs/legacy/SensorSourceNode.js","webpack://OpenHPS.sensors/./dist/cjs/web/SensorSourceNode.js","webpack://OpenHPS.sensors/external umd {\"commonjs\":\"@openhps/core\",\"commonjs2\":\"@openhps/core\",\"amd\":\"core\",\"root\":[\"OpenHPS\",\"core\"]}","webpack://OpenHPS.sensors/webpack/bootstrap","webpack://OpenHPS.sensors/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@openhps/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"OpenHPS\", [\"core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OpenHPS\"] = factory(require(\"@openhps/core\"));\n\telse\n\t\troot[\"OpenHPS\"] = root[\"OpenHPS\"] || {}, root[\"OpenHPS\"][\"sensors\"] = factory(root[\"OpenHPS\"][\"core\"]);\n})((typeof self !== 'undefined' ? self : this), (__WEBPACK_EXTERNAL_MODULE__0__) => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SensorSourceNode = void 0;\nconst SensorSourceNode_1 = require(\"./web/SensorSourceNode\");\nObject.defineProperty(exports, \"SensorSourceNode\", { enumerable: true, get: function () { return SensorSourceNode_1.SensorSourceNode; } });\nconst SensorSourceNode_2 = require(\"./legacy/SensorSourceNode\");\nmodule.exports = 'Accelerometer' in window ? { SensorSourceNode: SensorSourceNode_1.SensorSourceNode } : { SensorSourceNode: SensorSourceNode_2.SensorSourceNode };\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SensorSourceNode = void 0;\nconst core_1 = require(\"@openhps/core\");\n/**\n * IMU source using the HTML5 browser API for device motion and device orientation.\n *\n * @category Source node\n */\nclass SensorSourceNode extends core_1.SourceNode {\n    constructor(options) {\n        var _a;\n        super(options);\n        this.options.source = (_a = this.options.source) !== null && _a !== void 0 ? _a : new core_1.DataObject(this.uid);\n        if (this.options.autoStart) {\n            this.once('build', this.start.bind(this));\n        }\n        this.once('destroy', this.stop.bind(this));\n    }\n    requestPermission() {\n        return Promise.resolve();\n    }\n    start() {\n        return new Promise((resolve) => {\n            const sensorUID = this.source ? this.source.uid : this.uid;\n            window.addEventListener('devicemotion', (event) => {\n                // Create a new data frame for the orientation change\n                const dataFrame = new core_1.DataFrame();\n                const frequency = 1000 / event.interval;\n                dataFrame.addSensor(new core_1.Accelerometer(sensorUID + '_accl', new core_1.Acceleration(event.accelerationIncludingGravity.x, event.accelerationIncludingGravity.y, event.accelerationIncludingGravity.z), frequency));\n                dataFrame.addSensor(new core_1.Gyroscope(sensorUID + '_gyro', new core_1.AngularVelocity(event.rotationRate.beta, event.rotationRate.gamma, event.rotationRate.alpha), frequency));\n                dataFrame.addSensor(new core_1.Accelerometer(sensorUID + '_linearaccl', new core_1.Acceleration(event.acceleration.x, event.acceleration.y, event.acceleration.z), frequency));\n                const source = this.source;\n                source.getPosition().angularVelocity = dataFrame.getSensor(core_1.Gyroscope).value;\n                dataFrame.addSensor(new core_1.AbsoluteOrientationSensor(sensorUID + '_orientation', source.getPosition().orientation));\n                dataFrame.source = source;\n                this.push(dataFrame);\n            }, true);\n            window.addEventListener('deviceorientation', (event) => {\n                const source = this.source;\n                source.getPosition().orientation = core_1.Orientation.fromEuler([event.beta, event.gamma, event.alpha]);\n            });\n            this.logger('debug', 'Browser orientation and motion events registered!');\n            resolve();\n        });\n    }\n    stop() {\n        return Promise.resolve();\n    }\n    onPull() {\n        return new Promise((resolve) => {\n            resolve(undefined);\n        });\n    }\n}\nexports.SensorSourceNode = SensorSourceNode;\n//# sourceMappingURL=SensorSourceNode.js.map","\"use strict\";\n/// <reference types=\"web\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SensorSourceNode = void 0;\nconst core_1 = require(\"@openhps/core\");\n/**\n * Sensor source node using Web Sensor API.\n */\nclass SensorSourceNode extends core_1.SourceNode {\n    constructor(options) {\n        super(options);\n        this._subscriptions = new Map();\n        this._values = new Map();\n        this._lastPush = 0;\n        this._running = false;\n        this.options.interval = this.options.interval || 100;\n        if (this.options.autoStart) {\n            this.once('build', this.start.bind(this));\n        }\n        this.once('destroy', this.stop.bind(this));\n    }\n    static checkPermissions(sensors) {\n        return this.requestPermissions(sensors);\n    }\n    static requestPermissions(sensors) {\n        return new Promise((resolve, reject) => {\n            Promise.all(sensors\n                .map((sensor) => this.getPermissions(sensor).map((permission) => navigator.permissions.query({ name: permission })))\n                .reduce((a, b) => [...a, ...b]))\n                .then((results) => {\n                if (results.every((result) => result.state === 'granted')) {\n                    resolve(true);\n                }\n                else {\n                    resolve(false);\n                }\n            })\n                .catch(reject);\n        });\n    }\n    start() {\n        return new Promise((resolve) => {\n            this._running = true;\n            if (this._subscriptions.size > 0) {\n                return resolve();\n            }\n            this.options.sensors.forEach((sensor) => {\n                const SensorType = this.findSensor(sensor);\n                const sensorInstance = new SensorType({\n                    frequency: Math.round(1000 / this.options.interval),\n                });\n                sensorInstance.addEventListener('reading', (event) => {\n                    if (!this._running)\n                        return;\n                    this._values.set(sensor, event.target);\n                    if (this._isUpdated()) {\n                        this._lastPush = event.timeStamp;\n                        this.createFrame().catch((ex) => {\n                            this.logger('error', 'Unable to create sensor data frame!', ex);\n                        });\n                    }\n                });\n                sensorInstance.start();\n                this._subscriptions.set(sensor, sensorInstance);\n            });\n            resolve();\n        });\n    }\n    _isUpdated() {\n        return (Array.from(this._values.values()).filter((sensor) => sensor.timestamp > this._lastPush).length ===\n            Array.from(this._subscriptions.values()).filter((sensor) => sensor.activated).length);\n    }\n    stop() {\n        return new Promise((resolve) => {\n            if (this.options.softStop) {\n                this._running = false;\n            }\n            else {\n                this._subscriptions.forEach((value) => value.stop());\n                this._subscriptions = new Map();\n                this._values = new Map();\n            }\n            resolve();\n        });\n    }\n    createFrame() {\n        return new Promise((resolve) => {\n            const dataFrame = new core_1.DataFrame();\n            dataFrame.source = this.source;\n            const acceleration = this._values.get(core_1.Accelerometer);\n            const linearAcceleration = this._values.get(core_1.LinearAccelerationSensor);\n            const gyroscope = this._values.get(core_1.Gyroscope);\n            const orientation = this._values.get(core_1.AbsoluteOrientationSensor);\n            const relativeOrientation = this._values.get(core_1.RelativeOrientationSensor);\n            const magnetometer = this._values.get(core_1.Magnetometer);\n            const sourceUID = this.source ? this.source.uid : this.uid;\n            const frequency = 1000 / this.options.interval;\n            if (acceleration) {\n                dataFrame.addSensor(new core_1.Accelerometer(sourceUID + '_accel', new core_1.Acceleration(acceleration.x, acceleration.y, acceleration.z), frequency));\n            }\n            if (linearAcceleration) {\n                dataFrame.addSensor(new core_1.LinearAccelerationSensor(sourceUID + '_linearaccel', new core_1.Acceleration(linearAcceleration.x, linearAcceleration.y, linearAcceleration.z), frequency));\n            }\n            if (gyroscope) {\n                dataFrame.addSensor(new core_1.Gyroscope(sourceUID + '_gyro', new core_1.AngularVelocity(gyroscope.x, gyroscope.y, gyroscope.z, core_1.AngularVelocityUnit.RADIAN_PER_SECOND), frequency));\n            }\n            if (orientation) {\n                dataFrame.addSensor(new core_1.AbsoluteOrientationSensor(sourceUID + '_absoluteorientation', core_1.Orientation.fromQuaternion(new core_1.Quaternion(...orientation.quaternion)), frequency));\n            }\n            if (relativeOrientation) {\n                dataFrame.addSensor(new core_1.RelativeOrientationSensor(sourceUID + '_relativeorientation', core_1.Orientation.fromQuaternion(new core_1.Quaternion(...relativeOrientation.quaternion)), frequency));\n            }\n            if (magnetometer) {\n                dataFrame.addSensor(new core_1.Magnetometer(sourceUID + '_mag', new core_1.Magnetism(magnetometer.x, magnetometer.y, magnetometer.z), frequency));\n            }\n            this.push(dataFrame);\n            resolve();\n        });\n    }\n    onPull() {\n        return new Promise((resolve) => {\n            resolve(undefined);\n        });\n    }\n    findSensor(sensor) {\n        switch (sensor) {\n            case core_1.RelativeOrientationSensor:\n                return RelativeOrientationSensor;\n            case core_1.AbsoluteOrientationSensor:\n                return AbsoluteOrientationSensor;\n            case core_1.LinearAccelerationSensor:\n                return LinearAccelerationSensor;\n            // case SensorType.AMBIENT_LIGHT:\n            //     return AmbientLightSensor;\n            case core_1.Gyroscope:\n                return Gyroscope;\n            case core_1.Magnetometer:\n                return Magnetometer;\n            case core_1.Accelerometer:\n                return Accelerometer;\n            default:\n                return undefined;\n        }\n    }\n    static getPermissions(sensor) {\n        switch (sensor) {\n            // case SensorType.AMBIENT_LIGHT:\n            //     return [\"ambient-light-sensor\"];\n            case core_1.RelativeOrientationSensor:\n            case core_1.AbsoluteOrientationSensor:\n                return ['gyroscope', 'accelerometer', 'magnetometer'];\n            case core_1.Gyroscope:\n                return ['gyroscope'];\n            case core_1.Magnetometer:\n                return ['magnetometer'];\n            case core_1.LinearAccelerationSensor:\n            case core_1.Accelerometer:\n                return ['accelerometer'];\n            default:\n                return undefined;\n        }\n    }\n}\nexports.SensorSourceNode = SensorSourceNode;\n//# sourceMappingURL=SensorSourceNode.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(915);\n"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","Object","defineProperty","value","SensorSourceNode","SensorSourceNode_1","enumerable","get","SensorSourceNode_2","window","core_1","SourceNode","constructor","options","_a","super","source","DataObject","uid","autoStart","once","start","bind","stop","requestPermission","Promise","resolve","sensorUID","addEventListener","event","dataFrame","DataFrame","frequency","interval","addSensor","Accelerometer","Acceleration","accelerationIncludingGravity","x","y","z","Gyroscope","AngularVelocity","rotationRate","beta","gamma","alpha","acceleration","getPosition","angularVelocity","getSensor","AbsoluteOrientationSensor","orientation","push","Orientation","fromEuler","logger","onPull","undefined","_subscriptions","Map","_values","_lastPush","_running","static","sensors","requestPermissions","reject","all","map","sensor","getPermissions","permission","navigator","permissions","query","name","reduce","a","b","then","results","every","result","state","catch","size","forEach","sensorInstance","findSensor","Math","round","set","target","_isUpdated","timeStamp","createFrame","ex","Array","from","values","filter","timestamp","length","activated","softStop","linearAcceleration","LinearAccelerationSensor","gyroscope","relativeOrientation","RelativeOrientationSensor","magnetometer","Magnetometer","sourceUID","AngularVelocityUnit","RADIAN_PER_SECOND","fromQuaternion","Quaternion","quaternion","Magnetism","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}