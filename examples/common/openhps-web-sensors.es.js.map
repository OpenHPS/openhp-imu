{"version":3,"file":"web/openhps-web-sensors.es.js","mappings":";;;;;;;;;;;;;;;AAA0D;AAC6B;AAC3D;AAC5B,+CAA+C,gBAAgB,wEAAG,IAAI,kBAAkB,sEAAsB;AAC9G;;;;;;;;;;;;;;ACJiP;AACjP;AACA;AACA;AACA;AACA;AACO,+BAA+B,qDAAU;AAChD;AACA;AACA;AACA,8FAA8F,qDAAU;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oDAAS;AAC/C;AACA,wCAAwC,wDAAmB,0BAA0B,uDAAY;AACjG,wCAAwC,oDAAe,0BAA0B,0DAAe;AAChG,wCAAwC,wDAAmB,gCAAgC,uDAAY;AACvG;AACA,2EAA2E,oDAAe;AAC1F,wCAAwC,oEAA+B;AACvE;AACA;AACA,aAAa;AACb;AACA;AACA,mDAAmD,gEAAqB;AACxE,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;ACpDA;AAC+a;AAC/a;AACA;AACA;AACO,+BAA+B,qDAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,kBAAkB;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,oDAAS;AAC3C;AACA,kDAAkD,wDAAmB;AACrE,wDAAwD,mEAA8B;AACtF,+CAA+C,oDAAe;AAC9D,iDAAiD,oEAA+B;AAChF,yDAAyD,oEAA+B;AACxF,kDAAkD,uDAAkB;AACpE;AACA;AACA;AACA,wCAAwC,wDAAmB,2BAA2B,uDAAY;AAClG;AACA;AACA,wCAAwC,mEAA8B,iCAAiC,uDAAY;AACnH;AACA;AACA,wCAAwC,oDAAe,0BAA0B,0DAAe,wCAAwC,gFAAqC;AAC7K;AACA;AACA,wCAAwC,oEAA+B,qCAAqC,qEAA0B,KAAK,qDAAU;AACrJ;AACA;AACA,wCAAwC,oEAA+B,qCAAqC,qEAA0B,KAAK,qDAAU;AACrJ;AACA;AACA,wCAAwC,uDAAkB,yBAAyB,oDAAS;AAC5F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,oEAA+B;AAChD;AACA,iBAAiB,oEAA+B;AAChD;AACA,iBAAiB,mEAA8B;AAC/C;AACA;AACA;AACA,iBAAiB,oDAAe;AAChC;AACA,iBAAiB,uDAAkB;AACnC;AACA,iBAAiB,wDAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAA+B;AAChD,iBAAiB,oEAA+B;AAChD;AACA,iBAAiB,oDAAe;AAChC;AACA,iBAAiB,uDAAkB;AACnC;AACA,iBAAiB,mEAA8B;AAC/C,iBAAiB,wDAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AChKA,eAAe,YAAY,6BAA6B;AACxD;AACA,qBAAqB,m9CAAm9C;;;;;;SCFx+C;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCzBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,EAAE;UACF;UACA;;;;;UCVA;;;;;SEAA;SACA;SACA;SACA","sources":["webpack://@openhps/web-sensors/./dist/esm/index.js","webpack://@openhps/web-sensors/./dist/esm/legacy/SensorSourceNode.js","webpack://@openhps/web-sensors/./dist/esm/web/SensorSourceNode.js","webpack://@openhps/web-sensors/external module \"./openhps-core.es.js\"","webpack://@openhps/web-sensors/webpack/bootstrap","webpack://@openhps/web-sensors/webpack/runtime/define property getters","webpack://@openhps/web-sensors/webpack/runtime/harmony module decorator","webpack://@openhps/web-sensors/webpack/runtime/hasOwnProperty shorthand","webpack://@openhps/web-sensors/webpack/before-startup","webpack://@openhps/web-sensors/webpack/startup","webpack://@openhps/web-sensors/webpack/after-startup"],"sourcesContent":["import { SensorSourceNode } from './web/SensorSourceNode';\nimport { SensorSourceNode as SensorSourceNodeLegacy } from './legacy/SensorSourceNode';\nexport { SensorSourceNode };\nmodule.exports = 'Accelerometer' in window ? { SensorSourceNode } : { SensorSourceNode: SensorSourceNodeLegacy };\n//# sourceMappingURL=index.js.map","import { Acceleration, AngularVelocity, DataFrame, Orientation, SourceNode, AbsoluteOrientationSensor as AbsoluteOrientationSensorObject, Gyroscope as GyroscopeObject, Accelerometer as AccelerometerObject, DataObject, } from '@openhps/core';\n/**\n * IMU source using the HTML5 browser API for device motion and device orientation.\n *\n * @category Source node\n */\nexport class SensorSourceNode extends SourceNode {\n    constructor(options) {\n        var _a;\n        super(options);\n        this.options.source = (_a = this.options.source) !== null && _a !== void 0 ? _a : new DataObject(this.uid);\n        if (this.options.autoStart) {\n            this.once('build', this.start.bind(this));\n        }\n        this.once('destroy', this.stop.bind(this));\n    }\n    requestPermission() {\n        return Promise.resolve();\n    }\n    start() {\n        return new Promise((resolve) => {\n            const sensorUID = this.source ? this.source.uid : this.uid;\n            window.addEventListener('devicemotion', (event) => {\n                // Create a new data frame for the orientation change\n                const dataFrame = new DataFrame();\n                const frequency = 1000 / event.interval;\n                dataFrame.addSensor(new AccelerometerObject(sensorUID + '_accl', new Acceleration(event.accelerationIncludingGravity.x, event.accelerationIncludingGravity.y, event.accelerationIncludingGravity.z), frequency));\n                dataFrame.addSensor(new GyroscopeObject(sensorUID + '_gyro', new AngularVelocity(event.rotationRate.beta, event.rotationRate.gamma, event.rotationRate.alpha), frequency));\n                dataFrame.addSensor(new AccelerometerObject(sensorUID + '_linearaccl', new Acceleration(event.acceleration.x, event.acceleration.y, event.acceleration.z), frequency));\n                const source = this.source;\n                source.getPosition().angularVelocity = dataFrame.getSensor(GyroscopeObject).value;\n                dataFrame.addSensor(new AbsoluteOrientationSensorObject(sensorUID + '_orientation', source.getPosition().orientation));\n                dataFrame.source = source;\n                this.push(dataFrame);\n            }, true);\n            window.addEventListener('deviceorientation', (event) => {\n                const source = this.source;\n                source.getPosition().orientation = Orientation.fromEuler([event.beta, event.gamma, event.alpha]);\n            });\n            this.logger('debug', 'Browser orientation and motion events registered!');\n            resolve();\n        });\n    }\n    stop() {\n        return Promise.resolve();\n    }\n    onPull() {\n        return new Promise((resolve) => {\n            resolve(undefined);\n        });\n    }\n}\n//# sourceMappingURL=SensorSourceNode.js.map","/// <reference types=\"web\" />\nimport { SourceNode, Acceleration, Orientation, Quaternion, DataFrame, LinearAccelerationSensor as LinearAccelerationSensorObject, AbsoluteOrientationSensor as AbsoluteOrientationSensorObject, RelativeOrientationSensor as RelativeOrientationSensorObject, Magnetometer as MagnetometerObject, Gyroscope as GyroscopeObject, Accelerometer as AccelerometerObject, AngularVelocity, AngularVelocityUnit, Magnetism, } from '@openhps/core';\n/**\n * Sensor source node using Web Sensor API.\n */\nexport class SensorSourceNode extends SourceNode {\n    constructor(options) {\n        super(options);\n        this._subscriptions = new Map();\n        this._values = new Map();\n        this._lastPush = 0;\n        this._running = false;\n        this.options.interval = this.options.interval || 100;\n        if (this.options.autoStart) {\n            this.once('build', this.start.bind(this));\n        }\n        this.once('destroy', this.stop.bind(this));\n    }\n    static checkPermissions(sensors) {\n        return this.requestPermissions(sensors);\n    }\n    static requestPermissions(sensors) {\n        return new Promise((resolve, reject) => {\n            Promise.all(sensors\n                .map((sensor) => this.getPermissions(sensor).map((permission) => navigator.permissions.query({ name: permission })))\n                .reduce((a, b) => [...a, ...b]))\n                .then((results) => {\n                if (results.every((result) => result.state === 'granted')) {\n                    resolve(true);\n                }\n                else {\n                    resolve(false);\n                }\n            })\n                .catch(reject);\n        });\n    }\n    start() {\n        return new Promise((resolve) => {\n            this._running = true;\n            if (this._subscriptions.size > 0) {\n                return resolve();\n            }\n            this.options.sensors.forEach((sensor) => {\n                const SensorType = this.findSensor(sensor);\n                const sensorInstance = new SensorType({\n                    frequency: Math.round(1000 / this.options.interval),\n                });\n                sensorInstance.addEventListener('reading', (event) => {\n                    if (!this._running)\n                        return;\n                    this._values.set(sensor, event.target);\n                    if (this._isUpdated()) {\n                        this._lastPush = event.timeStamp;\n                        this.createFrame().catch((ex) => {\n                            this.logger('error', 'Unable to create sensor data frame!', ex);\n                        });\n                    }\n                });\n                sensorInstance.start();\n                this._subscriptions.set(sensor, sensorInstance);\n            });\n            resolve();\n        });\n    }\n    _isUpdated() {\n        return (Array.from(this._values.values()).filter((sensor) => sensor.timestamp > this._lastPush).length ===\n            Array.from(this._subscriptions.values()).filter((sensor) => sensor.activated).length);\n    }\n    stop() {\n        return new Promise((resolve) => {\n            if (this.options.softStop) {\n                this._running = false;\n            }\n            else {\n                this._subscriptions.forEach((value) => value.stop());\n                this._subscriptions = new Map();\n                this._values = new Map();\n            }\n            resolve();\n        });\n    }\n    createFrame() {\n        return new Promise((resolve) => {\n            const dataFrame = new DataFrame();\n            dataFrame.source = this.source;\n            const acceleration = this._values.get(AccelerometerObject);\n            const linearAcceleration = this._values.get(LinearAccelerationSensorObject);\n            const gyroscope = this._values.get(GyroscopeObject);\n            const orientation = this._values.get(AbsoluteOrientationSensorObject);\n            const relativeOrientation = this._values.get(RelativeOrientationSensorObject);\n            const magnetometer = this._values.get(MagnetometerObject);\n            const sourceUID = this.source ? this.source.uid : this.uid;\n            const frequency = 1000 / this.options.interval;\n            if (acceleration) {\n                dataFrame.addSensor(new AccelerometerObject(sourceUID + '_accel', new Acceleration(acceleration.x, acceleration.y, acceleration.z), frequency));\n            }\n            if (linearAcceleration) {\n                dataFrame.addSensor(new LinearAccelerationSensorObject(sourceUID + '_linearaccel', new Acceleration(linearAcceleration.x, linearAcceleration.y, linearAcceleration.z), frequency));\n            }\n            if (gyroscope) {\n                dataFrame.addSensor(new GyroscopeObject(sourceUID + '_gyro', new AngularVelocity(gyroscope.x, gyroscope.y, gyroscope.z, AngularVelocityUnit.RADIAN_PER_SECOND), frequency));\n            }\n            if (orientation) {\n                dataFrame.addSensor(new AbsoluteOrientationSensorObject(sourceUID + '_absoluteorientation', Orientation.fromQuaternion(new Quaternion(...orientation.quaternion)), frequency));\n            }\n            if (relativeOrientation) {\n                dataFrame.addSensor(new RelativeOrientationSensorObject(sourceUID + '_relativeorientation', Orientation.fromQuaternion(new Quaternion(...relativeOrientation.quaternion)), frequency));\n            }\n            if (magnetometer) {\n                dataFrame.addSensor(new MagnetometerObject(sourceUID + '_mag', new Magnetism(magnetometer.x, magnetometer.y, magnetometer.z), frequency));\n            }\n            this.push(dataFrame);\n            resolve();\n        });\n    }\n    onPull() {\n        return new Promise((resolve) => {\n            resolve(undefined);\n        });\n    }\n    findSensor(sensor) {\n        switch (sensor) {\n            case RelativeOrientationSensorObject:\n                return RelativeOrientationSensor;\n            case AbsoluteOrientationSensorObject:\n                return AbsoluteOrientationSensor;\n            case LinearAccelerationSensorObject:\n                return LinearAccelerationSensor;\n            // case SensorType.AMBIENT_LIGHT:\n            //     return AmbientLightSensor;\n            case GyroscopeObject:\n                return Gyroscope;\n            case MagnetometerObject:\n                return Magnetometer;\n            case AccelerometerObject:\n                return Accelerometer;\n            default:\n                return undefined;\n        }\n    }\n    static getPermissions(sensor) {\n        switch (sensor) {\n            // case SensorType.AMBIENT_LIGHT:\n            //     return [\"ambient-light-sensor\"];\n            case RelativeOrientationSensorObject:\n            case AbsoluteOrientationSensorObject:\n                return ['gyroscope', 'accelerometer', 'magnetometer'];\n            case GyroscopeObject:\n                return ['gyroscope'];\n            case MagnetometerObject:\n                return ['magnetometer'];\n            case LinearAccelerationSensorObject:\n            case AccelerometerObject:\n                return ['accelerometer'];\n            default:\n                return undefined;\n        }\n    }\n}\n//# sourceMappingURL=SensorSourceNode.js.map","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nmodule.exports = x({ [\"AbsoluteOrientationSensor\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.AbsoluteOrientationSensor, [\"Acceleration\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.Acceleration, [\"Accelerometer\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.Accelerometer, [\"AngularVelocity\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.AngularVelocity, [\"AngularVelocityUnit\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.AngularVelocityUnit, [\"DataFrame\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.DataFrame, [\"DataObject\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.DataObject, [\"Gyroscope\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.Gyroscope, [\"LinearAccelerationSensor\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.LinearAccelerationSensor, [\"Magnetism\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.Magnetism, [\"Magnetometer\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.Magnetometer, [\"Orientation\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.Orientation, [\"Quaternion\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.Quaternion, [\"RelativeOrientationSensor\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.RelativeOrientationSensor, [\"SourceNode\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_js_870a26f4__.SourceNode });","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./dist/esm/index.js\");\n",""],"names":[],"sourceRoot":""}